{"home":{"content":"# Hello, Wrold!\n---\n\n(In case you were wondering, that's definitely [_wrold_](https://medium.com/@the_taqquikarim/console-log-hello-wrold-3e3abeb44396#.37jsnp1sc)).\n\nWelcome to General Assembly! Today we will take a quick dive into the basics of web development.\n\nHere's a quick rundown of today's class.\n\n#### Learning Objectives\n---\n\n1. Experience a typical GA learning experience through active learning exercises.\n2. Gain an introductory understanding of a new skill or insight that can be utilized in a\nprofessional setting.\n3. Learn from materials created in conjunction with an experienced software engineer.\n4. Describe the difference between front-end and back-end coding and the basic components\nof HTML, CSS, and Javascript.\n5. Use HTML and CSS to mark up a basic webpage.\n\n#### Rundown\n---\n* #### [Warmup](#warmup)\n* #### [Guts of an HTTP Request](#guts-of-an-http-request)\n* #### [Deploying to the internets](#deploying-to-the-internets)\n* #### [HTML Basics](#html-basics)\n* #### [Practical CSS3 Guidelines](#practical-css3-guidelines)\n* #### [Conclusion](#conclusion)\n\n#### Resources\n---\n\n* #### [Intro to Coding Cheat Sheet](https://github.com/FEWDMaterials/WDISample/raw/master/Intro%20to%20Coding_Cheat%20Sheet.pdf)\n* #### [Intro to Coding Further Reading](https://github.com/FEWDMaterials/WDISample/raw/master/Intro%20to%20Coding_Further%20Reading.pdf)\n\n\n","idx":0},"title":{"content":"Sample Intro to Web Development","idx":1},"desc":{"content":"Quick primer on web devlepment","idx":2},"warmup":{"content":"# Warmup\n---\n\nA few things to do before we get started.f\n\n#### Setup\n---\n\nPlease create a [Github](https://github.com/) account! Please **be sure to verify your email as well!**\n\n#### Ice Breaker\n---\n\nWith a partner (the person next to you):\n\n* Introduce yourself!\n* Choose roles: one person has to draw and one person has to talk.\n* The talker chooses a shape (circle, square, etc)\n* the talker gives explicit directions to get their partner to draw the correct shape without saying the shape itself.\n* the drawer must follow partner's directions word for word and cannot draw anything that their partner does not specify directly.\n\n\n","idx":3},"guts-of-an-http-request":{"content":"# Guts of an HTTP Request\n---\n\n**Learning objective**: Understand how HTTP, or the HyperText Transfer Protocol, works.\n\n---\n\n#### Question \nWhat happens when you type in [http://www.google.com](http://www.google.com) into your URL bar?\n\n#### As it turns out, a whole lot.\n\n1. Chrome has no idea what [http://www.google.com](http://www.google.com) actually means, so first, it looks up the **IP Address** for Google.\n2. **DNS**, or **Domain Name System**, is a phone book containing IP Addresses for all the websites that exist on the internet.\n3. Chrome then sends an **HTTP Request** to the IP address associated with Google. An HTTP Request is essentially a text message asking Google for data.\n4. Google's **server** will issues a server **Response** back to your browser. This response is parsed by Chrome (ie: should Chrome display this response data? download it? etc)\n5. **???**\n6. Profit.\n\n#### Ok great, why do we care?\n\nThere are a few key insights to take away here.\n\nFirst and foremost, the main communication mechanism for the internet &mdash; you know, that thing that rules our lives &mdash; is **text**. Literally just **letters and words and numbers and characters**.\n\nThe other main point to take away here is this: the text that is transferred is written in a highly specific manner. It follows a very strict set of rules that can be parsed and understood by the server and the browser. In other words, this text follows a **specific set of grammatical rules**.\n\nThis set of grammar is what determines a **language**. In other words, the text being passed back and forth is a specific language (**HTML**, as it turns out). The browser and server understand this language. If **we** were to learn it as well, we would be able to command the browser to do whatever we want (ie: we would be able to create webpage layouts).\n\n\n\n\n","idx":4},"deploying-to-the-internets":{"content":"# Deploying to the internets\n---\n\n**Learning objective**: Understand the significance of Git and why GitHub is relevant to our interests.\n\n---\n\nSo at this point, we have a good sense of **how** an HTTP request works, but the main question that remains is this: **how do we get our webpage to the internets?!**\n\nTo answer this question, we must do two things: \n\n1. Build our own simple HTML page\n2. Push it to GitHub.\n\n## Building a basic HTML page\n---\nAt this point, we know that the server from our last section (say, **Google's** server) will return to us a response that is encoded in a specific way (a **language** if you will).\n\nBut! **Where is this data stored?**\n\nAs it turns out, it is stored in files and folders, in the same way we store data on our computers.\n\nSo in order for us to \"build\" our own HTML page, we must do two things:\n\n1. Create a folder to store our HTML data\n2. Create a file **within that folder** and write out HTML.\n\n## Pushing to GitHub\n---\n\nOk, now we have an HTML page! And get this: we can even load it in Chrome and see it rendered! How do we get this online?\n\nIn one word: **GitHub**.\n\n#### What is GitHub anyways?\n---\n\nGitHub is a service that allows developers to **push** their local **git repositories** online. As a courtesy, they also have their own server that will **host** HTML/CSS/JavaScript files that are found in the pushed repos.\n\nBut first, a few definitions:\n\n#### Git\n---\nGit is an open source software that allows developers to collaborate on large software projects. \n\nWith Git, developers can **commit** code at certain checkpoints. So for example, if you are building a website that requires:\n\n1. a form,\n2. a slideshow,\n3. and a server request, \n\nYou would implement the form then **commit** that code. Then, you would implement the slideshow and **commit**. Finally, you would implement the server requestand **commit** once more. \n\nThis is useful because if, for any reason your updates to the slideshow breaks your form code, you can easily **roll back** to your last commit (the form implementation) and that code would remain pristine and unbroken. \n\n#### Git Repository \n---\nWhen you take a piece of code and start tracking it with Git, you are turning it into a git **repository**. Your git repository will store all your commits, keep track of your code, give you commands that allow you to roll back to a previous commit, etc.\n\n#### Pushing to GitHub\n---\n\nThe final piece is this: your awesome git repo has let's say 500 commits on it. This is awesome! \n\nBut now calamity strikes! Your computer inexplicably dies the morning of your big presentation. Here's the main question: **are you screwed?**\n\nIn one word: **Yes**. \n\nIncidentally, this is **exactly** the problem GitHUb solves. As it turns out, Git allows you to **push** your git repos to other places. Either your friends computer, or your spare home computer, etc. GitHub is basically a cloud storage system that lets you store your git repos online for **free** and also share it with other developers.","idx":5},"html-basics":{"content":"# HTML Basics\n---\n\n**Learning objective**: Learn the basic structure of a simple HTML page.\n\n\n#### Exercise\n---\n\nPlease create a simple webpage and mark up your own resume template. Use **only** pure **HTML tags** and do not worry to much about the styles itself. You may use the **[example](http://resume.taqquikarim.com/)** above as reference.\n\nIf you do not feel comfortable using your own credentials in this exercise, feel free to make up a persona or use a celebrity (ie: **Mickey Mouse**).\n\n\n---\n\n\nHTML stands for **Hyper Text Markup Language**. It is a set of annotations that help parsers (ie: search engines) **understand** the nature of the information that is present on the page.\n\nThink of it like an outline that describes the high level importance of different elements of your webpage.\n\n#### Basic setup\n---\n\nYour typical HTML file will look like this:\n\n```html\n<!doctype html>\n<html>\n <head>\n <!--\n the HEAD section of html does not have any content\n that the user can see\n\n instead, we place things like:\n page title\n external css links\n SEO keywords\n here\n -->\n <meta charset=\"utf-8\">\n <title>My First Awesome Site</title>\n </head>\n <body>\n <!--\n\n the BODY section will contain all the tags\n that the user can _SEE_ and _INTERACT_ with\n -->\n </body>\n</html>\n```\n\n#### Key components\n---\n\n**`<!doctype html>`**\n\nThis tag tells the browser to read our HTML content as HTML5, the latest and greatest revision of the HTML spec. We MUST include it as the first thing on our .html files. I usually type it as all lower case, but it's common practice to also type as: <!DOCTYPE html>\n\n**`<html>`**\n\nThis is the root tag. Basically, all other tags in your html file must live inside this tag. Note how on the bottom of the code snippet, we have a \"\". This is called closing a tag and we must close all tags that we open (with the exception of a few). If we do not do this, our HTML markup becomes invalid.\n\n**`<head>`**\n\nThis section contains content that does not show the user things. Typically, we would expect to see things such as the page title, external links, and SEO tags here.\n\n**`<body>`**\n\nAll the magic happens here. All the tags the user interacts with should live in this tag.\n\n#### Commonly used HTML Tags\n---\n\n```html\n<!--\n the h1 - or heading one - will have the most important text on page \n by the old guard, we should really only have one h1 per page\n -->\n <h1>Hello, Wrold</h1>\n\n <h2>This is a h2</h2>\n\n <h3>This is an h3</h3>\n\n <h4>This is an h4</h4>\n\n <h5>This is an h5</h5>\n\n <h6>This is an h6</h6> \n\n <!--\n this is an inline element\n unline the block element, which is meant to provide structure\n the inline element is interpreted as content\n this means that will appear next to one another\n -->\n <strong>This is an inline element</strong>\n <strong>This is another inline element</strong>\n\n <!-- this is a block element so it will NOT be on the same line -->\n <h1>Will this be on the same line?</h1>\n\n <!-- \n\n differences between block elements and inline elements\n block: takes up entire width of page unless otherwise told \n (we don't know how yet)\n we can impose dimensions on block elements\n inline: meant to be content or text\n we cannot impose dimensions on inline elements \n\n -->\n\n <!-- how to add more spaces or line breaks?? -->\n <h1>THIS will have many &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spaces</h1>\n\n <h1>This is <br> Sparta</h1>\n\n <a href=\"http://www.google.com\">Hello, Wrold I'm a link, yo</a>\n\n <!--\n this is one mode\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\"></tagName>\n\n this is a self closing tag\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\">\n --> \n\n <!--\n convention: \n external links open up in new tab\n absolute URLs\n\n internal links open up in same tab\n relative URLs\n -->\n\n <a href=\"http://www.google.com\" target=\"_blank\">Hello, Wrold I'm ALSO a link, yo</a>\n\n <em>This is an em</em>\n\n <p>This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.</p>\n\n <img src=\"http://placekitten.com/g/200/300\">\n <span>This is a kitten. S/he is cute.</span>\n\n <ul>\n <li>This is a list item <div></div></li>\n <li>This is another list item</li>\n <li>This is a third list item</li>\n </ul>\n\n <ol>\n <li>This is an ordered list item</li>\n <li>This is another ordered list item</li>\n <li>This is a third ordered list item</li>\n </ol>\n\n <div></div>\n\n <span></span>\n```","idx":6},"practical-css3-guidelines":{"content":"# Practical CSS3 Guidelines\n---\n\n**Learning Objective**: Understand the implementation of CSS3 as a technique for enhancing user experience.\n\n---\n\n\nLet's talk about **CSS**, or **Cascading Style Sheets**, the language that allows us to define styles and adjustments to default content on our webpages.\n\n#### Exercise\n---\nTake the resume that you built in the last section and apply a few of the CSS principles we will cover in this section to improve overall user experience.\n\n### Basic Definition\n---\n\nMethod for searching your html tags efficiently and styling the results it finds.\n\n** Three ways to CSS **\n\n1. This way is evil, we won't even talk about it.\n2. This way is also not very good, we won't even talk about it.\n3. This way is ideal! let's discuss how to link in external files to your index.html...\n\n** Selectors **\n\n**SELECTOR**: a keyword used to query your html tags, classes, ids -- (the last two are html attributes)\n\n**RULES**: the style attributes you are going to set\n\n**[Exhaustive list of CSS properties and values](http://www.w3schools.com/cssref/)**\n\n#### CSS Use Cases\n---\n\nHere are some interesting use cases where CSS3 in particular becomes super handy.\n\n#### Animations\n---\n\nYou can do some really awesome work with animating your elements.\n\n* **[Spinner](http://fewd.us/howdoi/#/problem/42730)**\n\n* **[Repeating, multiple animations](http://fewd.us/howdoi/#/problem/4270)**\n\n#### Transitions\n---\n\nTransitions are animations that are triggered usually by some form of user interaction.\n\n* **[Hover Effects](http://fewd.us/howdoi/#/problem/4268)**\n\n#### Pseudo Selectors\n---\n\nPsuedo classes allow us to style specific types of element features, **i.e.** the **:hover** pseudo selector can be used to style an element as the user puts his mouse over it.\n\n* **[Menu Hover Effect](http://fewd.us/howdoi/#/problem/4957)**\n\nOther examples of pseudo selectors: **:visited**, **:after**, etc\n\n#### Overflows\n---\n\nKeep track of content and determine how it should behave if there is more content than space in the container.\n\n* **[Overflow Example](http://fewd.us/howdoi/#/problem/4165)**\n\n#### Grids\n---\n\nThis one is super expansive and you could literally teach an entire course on this. For now, take a look at a few examples / problems to gain perspective on this.\n\n* **[Vertically and Horizontally Center](http://fewd.us/jargon/#/problem/10099)**\n\n* **[Three Column Grid](http://fewd.us/howdoi/#/problem/4258)**\n\n* **[Flex Align/Justify](http://fewd.us/jargon/#/problem/10100)**\n\n* **[Flex Direction](http://fewd.us/jargon/#/problem/10097)**\n\n* **[Flex Wrap](http://fewd.us/jargon/#/problem/10098)**\n\n#### References\n---\n1. **[Exhaustive Guide to Flex](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)**\n2. **[CSS Animations Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations)**\n3. \n**[Exhaustive list of CSS properties and values](http://www.w3schools.com/cssref/)**\n4. **[Exhaustive list of CSS3 properties](http://www.tutorialrepublic.com/css-reference/css3-properties.php)**\n","idx":7},"conclusion":{"content":"# Conclusion\n---\n\nHeh did not have time! I'll just talk out loud.\n\nCheckout out [GA's website](https://generalassemb.ly/).","idx":8},"__list__":["home","title","desc","warmup","guts-of-an-http-request","deploying-to-the-internets","html-basics","practical-css3-guidelines","conclusion"]}